install.packages("caret")
knitr::opts_chunk$set(echo = TRUE, fig.width = 7, fig.height = 4)
if(!require("pacman")) install.packages("pacman")
pacman::p_load(dplyr, ggplot2, glmnet, car, data.table)   #add your packages here
loan <- fread("loanStats_07_11_clean.csv", stringsAsFactors = T)
loan <- fread("LendingClubCase/LoanStats_07_11_Clean.csv", stringsAsFactors = T)
lending_data <- read_csv("LendingClubCase/LoanStats_07_11_Clean.csv")
lending_data <- fread("LendingClubCase/LoanStats_07_11_Clean.csv")
summary(lending_data)
lending_data <- fread("LendingClubCase/LoanStats_07_11_Clean.csv")
names(lending_data)
summary(lending_data)
library(dplyr)
library(ggplot2)
lending_data$loan_status <- as.numeric(lending_data$loan_status)
lending_data$loan_status <- lending_data$loan_status - 1
Distribution <- lending_data %>% group_by(grade) %>% summarise(fully.paid = mean(loan_status))
Distribution["Defaulted"] <- 1 - Distribution$fully.paid
barplot(data = Distribution, fully.paid ~ grade, col=c("darkblue"), besides=TRUE)
library(dplyr)
library(ggplot2)
lending_data$loan_status <- as.numeric(lending_data$loan_status)
lending_data$loan_status <- lending_data$loan_status - 1
Distribution <- lending_data %>% group_by(grade) %>% summarise(fully.paid = mean(loan_status))
Distribution["Defaulted"] <- 1 - Distribution$fully.paid
# barplot(data = Distribution, fully.paid ~ grade, col=c("darkblue"), besides=TRUE)
View(Distribution)
lending_data %>% group_by(loan_status) %>% summarise(mean(annual_inc))
boxplot(annual_inc~loan_status,lending_data)
plot(lending_data$annual_inc, lending_data$loan_status, ylab="loan status",xlab="annual income")
fit1 <- glm(loan_status~annual_inc, lending_data, family=binomial(logit))
fit1 <- glm(loan_status~annual_inc, lending_data, family=binomial(logit))
knitr::opts_chunk$set(echo = TRUE, fig.width = 7, fig.height = 4)
if(!require("pacman")) install.packages("pacman")
pacman::p_load(dplyr, ggplot2, glmnet, car, data.table)   #add your packages here
loan <- fread("LendingClubCase/LoanStats_07_11_Clean.csv", stringsAsFactors = T)
knitr::opts_chunk$set(echo = TRUE, fig.width = 7, fig.height = 4)
if(!require("pacman")) install.packages("pacman")
pacman::p_load(dplyr, ggplot2, glmnet, car, data.table)   #add your packages here
loan <- fread("LendingClubCase/LoanStats_07_11_Clean.csv", stringsAsFactors = T)
lending_data <- read_csv("LendingClubCase/LoanStats_07_11_Clean.csv")
lending_data <- read_csv("LendingClubCase/LoanStats_07_11_Clean.csv")
knitr::opts_chunk$set(echo = TRUE, fig.width = 7, fig.height = 4)
if(!require("pacman")) install.packages("pacman")
pacman::p_load(tidyverse, glmnet, car, data.table,summarytools,rpart.plot,r.part)   #add your packages here
knitr::opts_knit$set(root.dir = '/Users/ksun/Downloads/stat571/stat571-team-39/hw4')
lending_data <- fread("LendingClubCase/LoanStats_07_11_Clean.csv")
lending.data.pre = lending_data[,-c("issue_d","funded_amnt","funded_amnt_inv","total_pymnt","total_pymnt_inv","total_rec_prncp","total_rec_int","total_rec_late_fee","recoveries","collection_recovery_fee","last_pymnt_d","last_pymnt_amnt","last_credit_pull_d")]
possible.factor = c("loan_amnt","int_rate","grade","home_ownership","annual_inc","addr_state","dti","verification_status","delinq_2yrs","total_acc","pub_rec","revol_bal","pub_rec_bankruptcies")
lending.sum = lending_data[order(grade),.(
fully.paid.prop = length(which(loan_status == "Fully Paid"))/length(loan_status)
),by=grade]
ggplot(data = lending.sum,aes(x=grade,weight=fully.paid.prop))+
geom_bar(fill = "Darkblue")+
ylab("prop of fully paid loans")+
theme_bw()
income = lending_data %>% group_by(loan_status) %>% summarise(mean(annual_inc))
ggplot(data = lending_data,aes(x=int_rate,y=loan_status))+
geom_point(position = "jitter")+
theme_bw()
tree_data <- lending_data %>% select(c(loan_status, dti, delinq_2yrs,  inq_last_6mths, revol_util, revol_bal, open_acc, pub_rec, total_acc, pub_rec_bankruptcies))
tree_data$loan_status <- as.factor(tree_data$loan_status)
create_train_test <- function(data, size = 0.8, train = TRUE) {
n_row = nrow(data)
total_row = size * n_row
train_sample <- 1: total_row
if (train == TRUE) {
return (data[train_sample, ])
} else {
return (data[-train_sample, ])
}
}
data_train <- create_train_test(tree_data, 0.8, train = TRUE)
data_test <- create_train_test(tree_data, 0.8, train = FALSE)
dim(data_train)
prop.table(table(data_train$loan_status))
prop.table(table(data_test$loan_status))
prop.table(table(data_train$loan_status))
prop.table(table(data_test$loan_status))
fit_tree <- rpart(loan_status~., data = data_train, method = "class", minsplit = 2, maxdepth=8)
rpart.plot(fit_tree)
fit_tree <- rpart(loan_status~., data = data_train, method = "class", minsplit = 2, maxdepth=8)
rpart.plot(fit_tree)
loan_status
fit_tree <- rpart(loan_status~., data = data_train, method = "class", minsplit = 2, maxdepth=8)
rpart.plot(fit_tree)
fit_tree <- rpart(loan_status~., data = data_train, method = "class", cp=0.00096)
rpart.plot(fit_tree)
fit_tree <- rpart(loan_status~., data = data_train, method = "class", cp=0.00096)
rpart.plot(fit_tree)
View(data_train)
View(data_train)
MCE = function(prediction,actual){
False_negative = sum(prediction[actual == TRUE] != TRUE)
False_positive = sum(prediction[actual != TRUE] == TRUE)
return((False_negative*2.2 + False_positive)/length(actual))
}
#Baseline Model predicting all as would not default
MCE(rep(FALSE,3897),
tree_data$loan_status)
#Baseline Model predicting all as would not default
MCE(rep("Charged Off",3897),
tree_data$loan_status)
length(tree_Data)
length(tree_data)
nrow(tree_data)
#Baseline Model predicting all as would not default
MCE(rep("Charged Off",nrow(tree_data)),
tree_data$loan_status)
View(data_train)
#Baseline Model predicting all as would not default
MCE(rep("Fully Paid",nrow(tree_data)),
tree_data$loan_status)
tree_data <- lending_data %>% select(c(loan_status, dti, delinq_2yrs,  inq_last_6mths, revol_util, revol_bal, open_acc, pub_rec, total_acc, pub_rec_bankruptcies))
# tree_data$loan_status <- as.factor(tree_data$loan_status)
tree_data$loan_status = tree_data$loan_status != "Fully Paid"
create_train_test <- function(data, size = 0.8, train = TRUE) {
n_row = nrow(data)
total_row = size * n_row
train_sample <- 1: total_row
if (train == TRUE) {
return (data[train_sample, ])
} else {
return (data[-train_sample, ])
}
}
data_train <- create_train_test(tree_data, 0.8, train = TRUE)
data_test <- create_train_test(tree_data, 0.8, train = FALSE)
dim(data_train)
prop.table(table(data_train$loan_status))
prop.table(table(data_test$loan_status))
MCE = function(prediction,actual){
False_negative = sum(prediction[actual == TRUE] != TRUE)
False_positive = sum(prediction[actual != TRUE] == TRUE)
return((False_negative*2.2 + False_positive)/length(actual))
}
#Baseline Model predicting all as would not default
MCE(rep(FALSE,nrow(tree_data)), tree_data$loan_status)
pROC::auc(pROC::roc(as.integer(tree_data$Target),rep(0,nrow(tree_data))))
mod1 = glm(data = data_train, Target~.,family = "binomial")
mod1 = glm(data = data_train,Target~.,family = "binomial")
mod1 = glm(data = data_train,loan_status~.,family = "binomial")
summary(mod1)
#Confusion Matrix
table(predict(mod1,data_test,type = "response") > (1/2.2)/(1+(1/2.2)),
data_test$loan_status)
#Calculate MCE
MCE(predict(mod1,data_test,type = "response") > (1/2.2)/(1+(1/2.2)),
data_test$loan_status)
mod0_ROC = pROC::roc(as.integer(data_test$loan_status), predict(mod1,data_test,type = "response"))
pROC::auc(mod0_ROC)
model_tree <- rpart(loan_status~., data = data_train, method = "class", cp=0.00096)
rpart.plot(model_tree)
tree_ROC = pROC::roc(as.integer(data_test$loan_status), predict(model_tree,newdata = data_test,type = "prob")[,2] )
print(pROC::auc(tree_ROC))
model_rf = randomForest::randomForest(loan_status~., data_train, method = "class", mtry = 5)
install.packages("randomForest")
library(randomForest)
model_rf = randomForest::randomForest(loan_status~., data_train, method = "class", mtry = 5)
yes
rf_ROC = pROC::roc(as.integer(data_test$loan_status), predict(model_rf,newdata = data_test,type = "prob")[,2] )
rf_ROC = pROC::roc(as.integer(data_test$loan_status), predict(model_rf,newdata = data_test,type = "response")[,2] )
library(randomForest)
model_rf
table(predict(model_rf,data_test,type = "response") > (1/2.2)/(1+(1/2.2)),
data_test$loan_status)
predict(model_rf,newdata = data_test,type = "response")
rf_ROC = pROC::roc(as.integer(data_test$loan_status), predict(model_rf,newdata = data_test,type = "response")[,2])
rf_ROC = pROC::roc(as.integer(data_test$loan_status), predict(model_rf,newdata = data_test,type = "response"))
rf_ROC = pROC::roc(as.integer(data_test$loan_status), predict(model_rf,newdata = data_test,type = "response"))
print(pROC::auc(rf_ROC))
table(predict(model_tree,data_test,type = "response") > (1/2.2)/(1+(1/2.2)),
data_test$loan_status)
table(predict(model_tree,data_test,type = "response") > (1/2.2)/(1+(1/2.2)),
data_test$loan_status)
table(predict(model_tree,data_test,type = "prob") > (1/2.2)/(1+(1/2.2)), data_test$loan_status)
predict(model_tree,data_test,type = "prob")
table(predict(model_tree,data_test,type = "prob")[,2] > (1/2.2)/(1+(1/2.2)), data_test$loan_status)
table(predict(model_tree,data_test,type = "prob")[,2] > (1/2.2)/(1+(1/2.2)), data_test$loan_status)
table(predict(model_tree,data_test,type = "prob")[,2] > (1/2.2)/(1+(1/2.2)), data_test$loan_status)
table(predict(model_tree,data_test,type = "prob")[,1] > (1/2.2)/(1+(1/2.2)), data_test$loan_status)
