knitr::opts_chunk$set(echo = T, warning = F, message = F)
knitr::opts_knit$set(root.dir = 'G:/github/modern-data-mining/hw4/martin')
output_format <- ifelse(is.null(knitr::opts_knit$get("rmarkdown.pandoc.to")),
"text", knitr::opts_knit$get("rmarkdown.pandoc.to"))
options(scipen = 0, digits = 4)  # controls base R output
if(!require('pacman')) {
install.packages('pacman')
}
pacman::p_load(data.table, reshape2, readxl, lubridate, tidyverse, pROC, cowplot,
kableExtra, RColorBrewer, lmtest, stargazer, bestglm, summarytools, glmnet, leaps,caret)
Sys.setlocale(,"English")
hd.data = fread("Framingham.dat")
setnames(hd.data,1,"HD")
hd.data[,":="(HD = as.factor(HD),SEX = as.factor(SEX))]
view(dfSummary(hd.data),method = "render") # some missings here
hd.data.clean = na.omit(hd.data)
set.seed(50)
sample.hd = hd.data.clean[sample(nrow(hd.data.clean),5),.(HD,SBP)]
kbl(sample.hd,caption = '5 samples of hd data set', booktabs = T,linesep = "")%>%
kable_styling(latex_options = c("HOLD_position"))
sample.glm = glm(HD~.,data = sample.hd,family = "binomial")
stargazer(sample.glm,header=FALSE, type=output_format,no.space = T)
sample.pre = predict(sample.glm,hd.data[nrow(hd.data)],type = "response")
fit1 = glm(HD~SBP,data = hd.data.clean,family = "binomial")
fit1.sum.list = list()
new.z = c()
j = 1
for (i in c(2,3,5,6,7,8)) {
data.sub = hd.data.clean[,c(1,4,i),with=F]
fit1.new = glm(HD~.,data = data.sub,family = "binomial")
fit1.sum.list[[j]] = summary(fit1.new)
new.z[j] = fit1.sum.list[[j]]$coefficients[3,3] # z-value of the new var
j = j + 1
}
best.fit = which.max(new.z) # should include sex by z
fit2 = glm(HD~.,data = hd.data.clean[,c(1,3,4),with=F],family = "binomial")
waldtest(fit1,fit2) # note: use F-statistics here
lrtest(fit1,fit2) # same as Anova() in 'car' package
j = 0
data = hd.data.clean
while (j<1) {
reg = glm(HD~.,data = data,family = "binomial")
sum.reg = summary(reg)
max.p.num = which.max(sum.reg$coefficients[-1,4])
max.p.name = names(max.p.num)
max.p.info = sum.reg$coefficients[max.p.num+1,]
if(max.p.info[4] > 0.05){
data = data[,-max.p.name,with=F]
print(paste0("Eliminate var: ",max.p.name," p-value: ",round(max.p.info[4],digits = 3)))
}else{
break
}
}
fit.backward = reg
stargazer(fit.backward,header=FALSE, type=output_format,no.space = T)
xy = data.table(hd.data.clean[,-1],hd.data.clean[,1])
fit.exhaustive = bestglm(xy,family = binomial,method = "exhaustive",IC = "AIC",nvmax = 10)
fit.exhau.best = fit.exhaustive$BestModel
stargazer(fit.exhau.best,header=FALSE, type=output_format,no.space = T)
liz.prob = predict(fit.exhau.best,hd.data[nrow(hd.data)],type = "response")
roc.fit1 = roc(hd.data.clean$HD,fit1$fitted.values,plot=T,col="blue")
num = max(roc.fit1$sensitivities[roc.fit1$specificities>0.9])
threshold = roc.fit1$thresholds[roc.fit1$sensitivities == num]
roc.fit2 = roc(hd.data.clean$HD,fit2$fitted.values)
roc.data.fit1 = data.table(spec = roc.fit1$specificities,sens = roc.fit1$sensitivities,model = "fit1")
roc.data.fit2 = data.table(spec = roc.fit2$specificities,sens = roc.fit2$sensitivities,model = "fit2")
roc.data.combine = rbind(roc.data.fit1,roc.data.fit2)
ggplot(roc.data.combine,aes(x=spec,y=sens,group=model,color=model))+
geom_line()+
xlab("True negative rates")+
ylab("True positive rates")+
labs(title = "ROC curves for two models")+
theme_bw()
fit1.pred = ifelse(fit1$fitted.values>0.5,1,0)
fit2.pred = ifelse(fit2$fitted.values>0.5,1,0)
confusionMatrix(as.factor(fit1.pred),reference = hd.data.clean$HD,positive = "1")
confusionMatrix(as.factor(fit2.pred),reference = hd.data.clean$HD,positive = "1")
data.fit1 = data.table(thres = roc.fit1$thresholds,spec = roc.fit1$specificities,sens = roc.fit1$sensitivities,pos.num = length(which(hd.data.clean$HD == "1")),neg.num = nrow(hd.data.clean)-length(which(hd.data.clean$HD == "1")),model = "fit1")
data.fit1[,":="(ppv = pos.num * sens/(pos.num*sens + neg.num*(1-spec)),
npv = neg.num * spec/(neg.num * spec + pos.num * (1-sens)))]
fit1.use = data.fit1 %>%
pivot_longer(c(ppv,npv),names_to = "type")
fit1.pv = ggplot(fit1.use,aes(x=thres,y=value,group=type,color=type))+
geom_line()+
xlab("Thresholds for p")+
ylab("PPV or NPV")+
scale_x_continuous(limits = c(0,1),breaks = seq(0,1,0.1))+
scale_y_continuous(limits = c(0,1),breaks = seq(0,1,0.1))+
labs(title = "PPV and NPV with different thresholds, fit1")+
theme_bw()
data.fit2 = data.table(thres = roc.fit2$thresholds,spec = roc.fit2$specificities,sens = roc.fit2$sensitivities,pos.num = length(which(hd.data.clean$HD == "1")),neg.num = nrow(hd.data.clean)-length(which(hd.data.clean$HD == "1")),model = "fit2")
data.fit2[,":="(ppv = pos.num * sens/(pos.num*sens + neg.num*(1-spec)),
npv = neg.num * spec/(neg.num * spec + pos.num * (1-sens)))]
fit2.use = data.fit2 %>%
pivot_longer(c(ppv,npv),names_to = "type")
fit2.pv = ggplot(fit2.use,aes(x=thres,y=value,group=type,color=type))+
geom_line()+
xlab("Thresholds for p")+
ylab("PPV or NPV")+
scale_x_continuous(limits = c(0,1),breaks = seq(0,1,0.1))+
scale_y_continuous(limits = c(0,1),breaks = seq(0,1,0.1))+
labs(title = "PPV and NPV with different thresholds, fit2")+
theme_bw()
plot_grid(fit1.pv,fit2.pv)
fit.exhau.best$coefficients[,1]
fit.exhau.best$coefficients
