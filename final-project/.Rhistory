x_val <- subset(x_val, select = -c(Label))
y_train_oneh <- to_categorical(y_train, num_classes = 2)
x_train <- copy(train)
y_train <- x_train$Label
# y_train <-x_train[,1]
x_train <- subset(x_train, select = -c(Label))
x_test <- copy(test)
y_test <- x_test$Label
# y_test <-x_test[,1]
x_test <- subset(x_test, select = -c(Label))
x_val <- copy(val)
y_val <- x_val$Label
# y_val <-x_val[,1]
x_val <- subset(x_val, select = -c(Label))
y_train_oneh <- to_categorical(y_train, num_classes = 2)
View(y_train_oneh)
model <- keras_model_sequential() %>%
layer_dense(units = 16, activation = "relu", input_shape = ncol(x_train)) %>%
layer_dense(units = 16, activation = "relu") %>%
layer_dense(units = ncol(y_train_oneh), activation = "sigmoid")
model %>% compile(
optimizer = "rmsprop",
loss = "binary_crossentropy",
metrics = c("accuracy")
)
model %>% fit(x_train, y_train, epochs = 4, batch_size = 512)
x_train <- copy(train)
y_train <- x_train$Label
# y_train <-x_train[,1]
x_train <- subset(x_train, select = -c(Label))
x_test <- copy(test)
y_test <- x_test$Label
# y_test <-x_test[,1]
x_test <- subset(x_test, select = -c(Label))
x_val <- copy(val)
y_val <- x_val$Label
# y_val <-x_val[,1]
x_val <- subset(x_val, select = -c(Label))
y_train_oneh <- to_categorical(y_train, num_classes = 2)
y_test_oneh <- to_categorical(y_test, num_classes = 2)
y_val_oneh <- to_categorical(y_val, num_classes = 2)
x_train <- data.matrix(x_train)
x_test <- data.matrix(x_test)
x_val <- data.matrix(x_val)
View(x_test)
View(x_test)
model <- keras_model_sequential() %>%
layer_dense(units = 16, activation = "relu", input_shape = ncol(x_train)) %>%
layer_dense(units = 16, activation = "relu") %>%
layer_dense(units = ncol(y_train_oneh), activation = "sigmoid")
model %>% compile(
optimizer = "rmsprop",
loss = "binary_crossentropy",
metrics = c("accuracy")
)
model %>% fit(x_train, y_train, epochs = 4, batch_size = 512)
model <- keras_model_sequential() %>%
layer_dense(units = 16, activation = "relu", input_shape = ncol(x_train)) %>%
layer_dense(units = 16, activation = "relu") %>%
layer_dense(units = ncol(y_train_oneh), activation = "sigmoid")
model %>% compile(
optimizer = "rmsprop",
loss = "binary_crossentropy",
metrics = c("accuracy")
)
model %>% fit(x_train, y_train, epochs = 4, batch_size = 512)
# data_split <- function(df, cuts, prob, ...)
# {
#   idx <- sample(seq(1, cuts), size = nrow(df), replace = TRUE, prob = prob, ...)
#   z = list()
#   for (i in 1:cuts)
#     z[[i]] <- df[idx == i,]
#   z
# }
# data <- fread("data/news.csv")
# split <- data_split(data, 3, c(0.8, .1, .1))
#
# train <- split[1][[1]]
# test <- split[2][[1]]
# val <- split[3][[1]]
train <- fread("data/train.csv", header=FALSE)
test <- fread("data/test.csv", header=FALSE)
val <- read_csv("data/val.csv", header=FALSE)
# data_split <- function(df, cuts, prob, ...)
# {
#   idx <- sample(seq(1, cuts), size = nrow(df), replace = TRUE, prob = prob, ...)
#   z = list()
#   for (i in 1:cuts)
#     z[[i]] <- df[idx == i,]
#   z
# }
# data <- fread("data/news.csv")
# split <- data_split(data, 3, c(0.8, .1, .1))
#
# train <- split[1][[1]]
# test <- split[2][[1]]
# val <- split[3][[1]]
train <- fread("data/train.csv", header=FALSE)
test <- fread("data/test.csv", header=FALSE)
val <- fread("data/val.csv", header=FALSE)
lookup <- c("TRUE" = 0, "Fake" = 1)
train$Label <- lookup[train$Label]
test$Label <- lookup[test$Label]
val$Label <- lookup[val$Label]
View(test)
View(test)
# data_split <- function(df, cuts, prob, ...)
# {
#   idx <- sample(seq(1, cuts), size = nrow(df), replace = TRUE, prob = prob, ...)
#   z = list()
#   for (i in 1:cuts)
#     z[[i]] <- df[idx == i,]
#   z
# }
# data <- fread("data/news.csv")
# split <- data_split(data, 3, c(0.8, .1, .1))
#
# train <- split[1][[1]]
# test <- split[2][[1]]
# val <- split[3][[1]]
train <- fread("data/train.csv")
test <- fread("data/test.csv")
val <- fread("data/val.csv")
lookup <- c("TRUE" = 0, "Fake" = 1)
train$Label <- lookup[train$Label]
test$Label <- lookup[test$Label]
val$Label <- lookup[val$Label]
View(test)
View(test)
x_train <- copy(train)
y_train <- x_train$Label
# y_train <-x_train[,1]
x_train <- subset(x_train, select = -c(Label))
x_test <- copy(test)
y_test <- x_test$Label
# y_test <-x_test[,1]
x_test <- subset(x_test, select = -c(Label))
x_val <- copy(val)
y_val <- x_val$Label
# y_val <-x_val[,1]
x_val <- subset(x_val, select = -c(Label))
y_train_oneh <- to_categorical(y_train, num_classes = 2)
y_test_oneh <- to_categorical(y_test, num_classes = 2)
y_val_oneh <- to_categorical(y_val, num_classes = 2)
x_train <- data.matrix(x_train)
x_test <- data.matrix(x_test)
x_val <- data.matrix(x_val)
View(y_train_oneh)
View(y_train_oneh)
x_train <- copy(train)
y_train <- x_train$Label
# y_train <-x_train[,1]
x_train <- subset(x_train, select = -c(Label))
x_test <- copy(test)
y_test <- x_test$Label
# y_test <-x_test[,1]
x_test <- subset(x_test, select = -c(Label))
x_val <- copy(val)
y_val <- x_val$Label
# y_val <-x_val[,1]
x_val <- subset(x_val, select = -c(Label))
y_train_oneh <- to_categorical(y_train, num_classes = 2)
y_test_oneh <- to_categorical(y_test, num_classes = 2)
y_val_oneh <- to_categorical(y_val, num_classes = 2)
x_train <- data.matrix(x_train)
x_test <- data.matrix(x_test)
x_val <- data.matrix(x_val)
type(x_train)
View(x_test)
View(x_test)
View(x_test)
x_train <- copy(train)
y_train <- x_train$Label
# y_train <-x_train[,1]
x_train <- subset(x_train, select = -c(Label))
x_test <- copy(test)
y_test <- x_test$Label
# y_test <-x_test[,1]
x_test <- subset(x_test, select = -c(Label))
x_val <- copy(val)
y_val <- x_val$Label
# y_val <-x_val[,1]
x_val <- subset(x_val, select = -c(Label))
y_train_oneh <- to_categorical(y_train, num_classes = 2)
y_test_oneh <- to_categorical(y_test, num_classes = 2)
y_val_oneh <- to_categorical(y_val, num_classes = 2)
x_train <- as.vector(x_train)
x_test <- as.vector(x_test)
x_val <- as.vector(x_val)
View(x_test)
View(x_test)
model <- keras_model_sequential() %>%
layer_dense(units = 16, activation = "relu", input_shape = ncol(x_train)) %>%
layer_dense(units = 16, activation = "relu") %>%
layer_dense(units = ncol(y_train_oneh), activation = "sigmoid")
model %>% compile(
optimizer = "rmsprop",
loss = "binary_crossentropy",
metrics = c("accuracy")
)
model %>% fit(x_train, y_train, epochs = 4, batch_size = 512)
# data_split <- function(df, cuts, prob, ...)
# {
#   idx <- sample(seq(1, cuts), size = nrow(df), replace = TRUE, prob = prob, ...)
#   z = list()
#   for (i in 1:cuts)
#     z[[i]] <- df[idx == i,]
#   z
# }
# data <- fread("data/news.csv")
# split <- data_split(data, 3, c(0.8, .1, .1))
#
# train <- split[1][[1]]
# test <- split[2][[1]]
# val <- split[3][[1]]
train <- fread("data/train.csv")
test <- fread("data/test.csv")
val <- fread("data/val.csv")
lookup <- c("TRUE" = 0, "Fake" = 1)
train$Label <- lookup[train$Label]
test$Label <- lookup[test$Label]
val$Label <- lookup[val$Label]
x_train <- copy(train)
y_train <- x_train$Label
# y_train <-x_train[,1]
x_train <- subset(x_train, select = -c(Label))
x_test <- copy(test)
y_test <- x_test$Label
# y_test <-x_test[,1]
x_test <- subset(x_test, select = -c(Label))
x_val <- copy(val)
y_val <- x_val$Label
# y_val <-x_val[,1]
x_val <- subset(x_val, select = -c(Label))
y_train_oneh <- to_categorical(y_train, num_classes = 2)
y_test_oneh <- to_categorical(y_test, num_classes = 2)
y_val_oneh <- to_categorical(y_val, num_classes = 2)
x_train <- as.matrix(x_train)
x_test <- as.matrix(x_test)
x_val <- as.matrix(x_val)
model <- keras_model_sequential() %>%
layer_dense(units = 16, activation = "relu", input_shape = ncol(x_train)) %>%
layer_dense(units = 16, activation = "relu") %>%
layer_dense(units = ncol(y_train_oneh), activation = "sigmoid")
model %>% compile(
optimizer = "rmsprop",
loss = "binary_crossentropy",
metrics = c("accuracy")
)
model %>% fit(x_train, y_train, epochs = 4, batch_size = 512)
x_train <- copy(train)
y_train <- x_train$Label
# y_train <-x_train[,1]
x_train <- subset(x_train, select = -c(Label))
x_test <- copy(test)
y_test <- x_test$Label
# y_test <-x_test[,1]
x_test <- subset(x_test, select = -c(Label))
x_val <- copy(val)
y_val <- x_val$Label
# y_val <-x_val[,1]
x_val <- subset(x_val, select = -c(Label))
y_train_oneh <- to_categorical(y_train, num_classes = 2)
y_test_oneh <- to_categorical(y_test, num_classes = 2)
y_val_oneh <- to_categorical(y_val, num_classes = 2)
x_train <- as.matrix(x_train)
x_test <- as.matrix(x_test)
x_val <- as.matrix(x_val)
x_train <- unname(x_train)
x_test <- unname(x_test)
x_val <- unname(x_val)
View(x_test)
View(x_test)
model <- keras_model_sequential() %>%
layer_dense(units = 16, activation = "relu", input_shape = ncol(x_train)) %>%
layer_dense(units = 16, activation = "relu") %>%
layer_dense(units = ncol(y_train_oneh), activation = "sigmoid")
model %>% compile(
optimizer = "rmsprop",
loss = "binary_crossentropy",
metrics = c("accuracy")
)
model %>% fit(x_train, y_train, epochs = 4, batch_size = 512)
x_train <- copy(train)
y_train <- x_train$Label
# y_train <-x_train[,1]
x_train <- subset(x_train, select = -c(Label))
x_test <- copy(test)
y_test <- x_test$Label
# y_test <-x_test[,1]
x_test <- subset(x_test, select = -c(Label))
x_val <- copy(val)
y_val <- x_val$Label
# y_val <-x_val[,1]
x_val <- subset(x_val, select = -c(Label))
y_train_oneh <- to_categorical(y_train, num_classes = 2)
y_test_oneh <- to_categorical(y_test, num_classes = 2)
y_val_oneh <- to_categorical(y_val, num_classes = 2)
x_train <- as.matrix(x_train)
x_test <- as.matrix(x_test)
x_val <- as.matrix(x_val)
x_train <- unname(x_train)
x_test <- unname(x_test)
x_val <- unname(x_val)
x_train <- as.numeric(x_train)
x_test <- as.numeric(x_test)
x_val <- as.numeric(x_val)
x_train <- copy(train)
y_train <- x_train$Label
# y_train <-x_train[,1]
x_train <- subset(x_train, select = -c(Label))
x_test <- copy(test)
y_test <- x_test$Label
# y_test <-x_test[,1]
x_test <- subset(x_test, select = -c(Label))
x_val <- copy(val)
y_val <- x_val$Label
# y_val <-x_val[,1]
x_val <- subset(x_val, select = -c(Label))
y_train_oneh <- to_categorical(y_train, num_classes = 2)
y_test_oneh <- to_categorical(y_test, num_classes = 2)
y_val_oneh <- to_categorical(y_val, num_classes = 2)
x_train <- as.matrix(x_train)
x_test <- as.matrix(x_test)
x_val <- as.matrix(x_val)
x_train <- unname(x_train)
x_test <- unname(x_test)
x_val <- unname(x_val)
View(x_val)
model <- keras_model_sequential() %>%
layer_dense(units = 16, activation = "relu", input_shape = c(293)) %>%
layer_dense(units = 16, activation = "relu") %>%
layer_dense(units = 1, activation = "sigmoid")
model <- keras_model_sequential() %>%
layer_dense(units = 16, activation = "relu", input_shape = c(293)) %>%
layer_dense(units = 16, activation = "relu") %>%
layer_dense(units = 2, activation = "sigmoid")
model <- keras_model_sequential() %>%
layer_dense(units = 64, activation = "relu", input_shape = ncol(x_train)) %>%
layer_dense(units = 64, activation = "relu") %>%
layer_dense(units = ncol(y_train_oneh), activation = "softmax")
model %>% compile(
optimizer = "rmsprop",
loss = "binary_crossentropy",
metrics = c("accuracy")
)
model %>% fit(x_train, y_train, epochs = 4, batch_size = 512)
model <- keras_model_sequential()
model %>%
layer_embedding(input_dim = ncol(x_train), output_dim = 32) %>%
layer_simple_rnn(units = 32) %>%
layer_dense(units = ncol(y_train), activation = "sigmoid")
model <- keras_model_sequential()
model %>%
layer_embedding(input_dim = 293, output_dim = 32) %>%
layer_simple_rnn(units = 32) %>%
layer_dense(units = 1, activation = "sigmoid")
model %>% compile(optimizer = "rmsprop",
loss = "binary_crossentropy",
metrics = c("acc"))
history <- model %>% fit(x_train, y_train,
epochs = 25,
batch_size = 128,
validation_split = 0.2)
model <- keras_model_sequential()
model %>%
layer_embedding(input_dim = 293, output_dim = 32) %>%
layer_simple_rnn(units = 32) %>%
layer_dense(units = 1, activation = "sigmoid")
model %>% compile(optimizer = "rmsprop",
loss = "binary_crossentropy",
metrics = c("acc"))
history <- model %>% fit(x_train, y_train,
epochs = 25,
batch_size = 128,
validation_data = list(x_val, y_val))
model <- keras_model_sequential()
model %>%
layer_embedding(input_dim = ncol(x_train), output_dim = 32) %>%
layer_simple_rnn(units = 32) %>%
layer_dense(units = ncol(y_train), activation = "sigmoid")
model <- keras_model_sequential()
model %>%
layer_embedding(input_dim = int(ncol(x_train)), output_dim = 32) %>%
layer_simple_rnn(units = 32) %>%
layer_dense(units = ncol(y_train), activation = "sigmoid")
model <- keras_model_sequential()
model %>%
layer_embedding(input_dim = 293, output_dim = 32) %>%
layer_simple_rnn(units = 32) %>%
layer_dense(units = 1, activation = "sigmoid")
model %>% compile(optimizer = "rmsprop",
loss = "binary_crossentropy",
metrics = c("acc"))
history <- model %>% fit(x_train, y_train,
epochs = 25,
batch_size = 128,
validation_data = list(x_val, y_val))
print(history)
model %>% evaluate(x_train, y_train)
pred <- model %>%
predict_classes(x_train)
model %>% evaluate(x_train, y_train)
pred <- model.predict(x_train)
model %>% evaluate(x_train, y_train)
pred <- model %>%
predict(x_train)
table(Predicted=pred, Actual=y_train)
model %>% evaluate(x_test, y_test)
pred1 <- model %>%
predict(x_test)
table(Predicted=pred1, Actual=y_test)
model %>% evaluate(x_train, y_train)
pred <- predict(model, x_train)
table(Predicted=pred, Actual=y_train)
model %>% evaluate(x_test, y_test)
pred1 <- predict(model, x_test)
table(Predicted=pred1, Actual=y_test)
model %>%
layer_embedding(input_dim = 293, output_dim = 32) %>%
layer_lstm(units = 32,return_sequences = TRUE) %>%
layer_lstm(units = 32,return_sequences = TRUE) %>%
layer_lstm(units = 32) %>%
layer_dense(units = 1, activation = "sigmoid")
model %>% compile(optimizer = "adam",
loss = "binary_crossentropy",
metrics = c("acc"))
history <- model %>% fit(x_train, y_train,
epochs = 25,
batch_size = 128,
validation_data = list(x_val, y_val))
print(history)
model %>% evaluate(x_train, y_train)
model %>% evaluate(x_test, y_test)
model %>%
layer_embedding(input_dim = 293, output_dim = 32) %>%
layer_lstm(units = 32,return_sequences = TRUE) %>%
layer_lstm(units = 32,return_sequences = TRUE) %>%
bidirectional(layer_lstm(units = 32)) %>%
layer_dense(units = 1, activation = "sigmoid")
model %>% compile(optimizer = "rmsprop",
loss = "binary_crossentropy",
metrics = c("acc"))
history <- model %>% fit(x_train, y_train,
epochs = 25,
batch_size = 128,
validation_data = list(x_val, y_val))
print(history)
model <- keras_model_sequential()
model %>%
layer_embedding(input_dim = 293, output_dim = 64) %>%
layer_simple_rnn(units = 64) %>%
layer_dense(units = 1, activation = "sigmoid")
model %>% compile(optimizer = "rmsprop",
loss = "binary_crossentropy",
metrics = c("acc"))
history <- model %>% fit(x_train, y_train,
epochs = 25,
batch_size = 128,
validation_data = list(x_val, y_val))
model <- keras_model_sequential()
model %>%
layer_embedding(input_dim = 293, output_dim = 64) %>%
layer_simple_rnn(units = 64) %>%
layer_dense(units = 1, activation = "sigmoid")
model %>% compile(optimizer = "rmsprop",
loss = "binary_crossentropy",
metrics = c("acc"))
history <- model %>% fit(x_train, y_train,
epochs = 25,
batch_size = 128,
validation_data = list(x_val, y_val))
model <- keras_model_sequential()
model %>%
layer_embedding(input_dim = 293, output_dim = 64) %>%
layer_simple_rnn(units = 64,return_sequences = TRUE,activation = 'relu') %>%
layer_simple_rnn(units = 64,return_sequences = TRUE,activation = 'relu') %>%
layer_simple_rnn(units = 64) %>%
layer_dense(units = 1, activation = "sigmoid")
model %>% compile(optimizer = "rmsprop",
loss = "binary_crossentropy",
metrics = c("acc"))
history <- model %>% fit(x_train, y_train,
epochs = 25,
batch_size = 128,
validation_data = list(x_val, y_val))
model <- keras_model_sequential()
# model <- keras_model_sequential()
# model %>%
#   layer_embedding(input_dim = 500, output_dim = 32) %>%
#   layer_simple_rnn(units = 32) %>%
#   layer_dense(units = 1, activation = "sigmoid")
model %>%
layer_embedding(input_dim = 293, output_dim = 32) %>%
layer_simple_rnn(units = 32,return_sequences = TRUE,activation = 'relu') %>%
layer_simple_rnn(units = 32,return_sequences = TRUE,activation = 'relu') %>%
layer_simple_rnn(units = 32) %>%
layer_dense(units = 1, activation = "sigmoid")
model %>% compile(optimizer = "rmsprop",
loss = "binary_crossentropy",
metrics = c("acc"))
history <- model %>% fit(x_train, y_train,
epochs = 4,
batch_size = 128,
validation_data = list(x_val, y_val))
print(history)
model %>% evaluate(x_train, y_train)
pred <- predict(model, x_train)
table(Predicted=pred, Actual=y_train)
model %>% evaluate(x_test, y_test)
pred1 <- predict(model, x_test)
table(Predicted=pred1, Actual=y_test)
